{
	"info": {
		"_postman_id": "b4147529-3835-449b-afc4-6d68262a90b2",
		"name": "Postman 2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Статус код 200\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Проверить, что в body приходит правильный текст \r",
							"\r",
							"pm.test(\"correct string in the body\", function () {\r",
							"    pm.response.to.have.body(\"This is the first responce from server!\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://162.55.220.72:5005/first",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Спарсить response body в json.\r",
							"let resp = pm.response.json();\r",
							"console.log(resp)\r",
							"\r",
							"// Спарсить request\r",
							"let req = pm.request.url.query.toObject()\r",
							"console.log(req)\r",
							"\r",
							"\r",
							"// Проверить, что name в ответе равно name s request (name забрать из request.\r",
							"\r",
							"pm.test(\"name in the response is equal to name's request\", function () {\r",
							"        pm.expect(resp.name).to.eql(req.name);\r",
							"});\r",
							"\r",
							"//  Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"name in the response is equal to name's request\", function () {\r",
							"        pm.expect(resp.age).to.eql(req.age);\r",
							"});\r",
							"\r",
							"// Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"\r",
							"pm.test(\"salary in the response is equal to salary's request\", function () {\r",
							"        pm.expect(resp.salary).to.eql(Number(req.salary));\r",
							"});\r",
							"\r",
							"//  Вывести в консоль параметр family из response.\r",
							"console.log(resp.family)\r",
							"\r",
							"// Проверить, что у параметра dog есть параметры name\r",
							"\r",
							"pm.test('the dog parameter has name parameters', function() {\r",
							"  pm.expect(resp.family.pets.dog).to.have.property('name');\r",
							"});\r",
							"// Проверить, что параметр name имеет значение Luky\r",
							"pm.test(\"the name parameter has the value Lucky\", function () {\r",
							"        pm.expect(resp.family.pets.dog.name).to.eql(\"Luky\");\r",
							"});\r",
							"// Проверить, что параметр age имеет значение 4.\r",
							"pm.test(\"the age parameter has a value of 4\", function () {\r",
							"        pm.expect(resp.family.pets.dog.age).to.eql(4);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5007/object_info_3?name=Asiya&age=32&salary=2000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5007",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Asiya"
						},
						{
							"key": "age",
							"value": "32"
						},
						{
							"key": "salary",
							"value": "2000"
						},
						{
							"key": "family",
							"value": "Ruslan",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Спарсить response body в json.\r",
							"let resp = pm.response.json();\r",
							"\r",
							"// Спарсить request\r",
							"let req = pm.request.url.query.toObject()\r",
							"console.log (req.salary)\r",
							"\r",
							"// Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"\r",
							"pm.test(\"name in the response is equal to name's request\", function () {\r",
							"        pm.expect(resp.name).to.eql(req.name);\r",
							"});\r",
							"//  Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"pm.test(\"age in the response is equal to age's request\", function () {\r",
							"        pm.expect(resp.age).to.eql(Number(req.age));\r",
							"});\r",
							"\r",
							"// Вывести в консоль параметр salary из request.\r",
							"console.log(req.salary)\r",
							"// Вывести в консоль параметр salary из response.\r",
							"console.log(resp.salary)\r",
							"// Вывести в консоль 0-й элемент параметра salary из response.\r",
							"console.log(resp.salary[0])\r",
							"// Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
							"console.log(resp.salary[1])\r",
							"// Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
							"console.log(resp.salary[2])\r",
							"\r",
							"// Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"let element1 =  req.salary * 2\r",
							"// let element = resp.family.u_salary_1_5_year\r",
							"// console.log(element1)\r",
							"pm.test(\"The 1nd element of the salary parameter is equal to salary*3 from request\", function () {\r",
							"        pm.expect(Number(resp.salary[1])).to.eql(element1);\r",
							"});\r",
							"\r",
							"//  Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"let element2 =  req.salary * 3\r",
							"pm.test(\"The 2nd element of the salary parameter is equal to salary*3 from request\", function () {\r",
							"        pm.expect(Number(resp.salary[2])).to.eql(element2);\r",
							"});\r",
							"\r",
							"// Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"for (let i = 0; i < resp.length; i++) {\r",
							"  console.log(resp.salary[i])\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_4?name={{name}}&age={{age}}&salary={{salary}}",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "{{name}}"
						},
						{
							"key": "age",
							"value": "{{age}}"
						},
						{
							"key": "salary",
							"value": "{{salary}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"// Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Спарсить response body в json.\r",
							"let resp = pm.response.json();\r",
							"\r",
							"\r",
							"\r",
							"//  Проверить, что name в ответе равно name s request(name вбить руками.)\r",
							"pm.test(\"name in the response is equal to name's request\", function () {\r",
							"        pm.expect(resp.name).to.eql(\"Asiya\");\r",
							"});\r",
							"// Проверить, что age в ответе равно age s request (age вбить руками.)\r",
							"pm.test(\"age in the response is equal to age's request\", function () {\r",
							"        pm.expect(resp.age).to.eql(\"32\");\r",
							"});\r",
							"\r",
							"//  Проверить, что salary в ответе равно salary s request (salary вбить руками.)\r",
							"pm.test(\"salary in the response is equal to salary's request\", function () {\r",
							"        pm.expect(resp.salary).to.eql(2000);\r",
							"});\r",
							"\r",
							"//  Спарсить request.\r",
							"let req = request.data\r",
							"\r",
							"// Проверить, что name в ответе равно name s request \r",
							"let req_name = resp.name\r",
							"\r",
							"pm.test(\"name in the response is equal to name's request\", function () {\r",
							"        pm.expect(resp.name).to.eql(req_name);\r",
							"});\r",
							"\r",
							"// Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"\r",
							"let req_age = resp.age\r",
							"\r",
							"pm.test(\"age in the response is equal to age's request\", function () {\r",
							"        pm.expect(resp.age).to.eql(req_age);\r",
							"});\r",
							"\r",
							"// Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"let req_salary = resp.salary\r",
							"\r",
							"pm.test(\"salary in the response is equal to salary's request\", function () {\r",
							"        pm.expect(resp.salary).to.eql(req_salary);\r",
							"});\r",
							"\r",
							"// Вывести в консоль параметр family из response.\r",
							"\r",
							"let family_resp =  resp.family \r",
							"console.log(family_resp)\r",
							"\r",
							"// Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"\r",
							"let u_salary_check_1_5_year = resp.salary * 4\r",
							"let u_salary_1_5_year =resp.family.u_salary_1_5_year\r",
							"// console.log(u_salary_1_5_year)\r",
							"\r",
							"pm.test(\"u_salary_1_5_year in the response is equal to salary*4\", function () {\r",
							"        pm.expect(u_salary_check_1_5_year).to.eql(u_salary_1_5_year);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Asiya",
							"type": "default"
						},
						{
							"key": "age",
							"value": "32",
							"type": "default"
						},
						{
							"key": "salary",
							"value": "2000",
							"type": "default"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5007/user_info_3",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5007",
					"path": [
						"user_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Asiya",
							"disabled": true
						},
						{
							"key": "age",
							"value": "32",
							"disabled": true
						},
						{
							"key": "salary",
							"value": "2000",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// Спарсить response body в json.\r",
							" let resp = pm.response.json();\r",
							"// console.log(resp)\r",
							"// Спарсить request\r",
							"let req = request.data\r",
							"// console.log(req)\r",
							"\r",
							"//  Проверить, что json response имеет параметр start_qa_salary\r",
							"pm.test(\"oarametr start_qa_salary\", function () {\r",
							"    pm.expect(resp).to.have.property(\"start_qa_salary\");\r",
							"});\r",
							"// Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"pm.test(\"parameter qa_salary_after_6_months\", function () {\r",
							"    pm.expect(resp).to.have.property(\"qa_salary_after_6_months\");\r",
							"});\r",
							"//  Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"pm.test(\"parameter qa_salary_after_12_months\", function () {\r",
							"    pm.expect(resp).to.have.property(\"qa_salary_after_12_months\");\r",
							"})\r",
							"//  Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"pm.test(\"parameter qa_salary_after_1.5_year\", function () {\r",
							"    pm.expect(resp).to.have.property(\"qa_salary_after_1.5_year\");\r",
							"})\r",
							"// Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"pm.test(\"parameter qa_salary_after_3.5_years\", function () {\r",
							"    pm.expect(resp).to.have.property(\"qa_salary_after_3.5_years\");\r",
							"})\r",
							"//  Проверить, что json response имеет параметр person\r",
							"pm.test(\"parameter person\", function () {\r",
							"    pm.expect(resp).to.have.property(\"person\");\r",
							"})\r",
							"//  Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"let start = req.salary\r",
							"\r",
							"pm.test(\"start_qa_salary=salary\", function () {\r",
							"    pm.expect(resp.start_qa_salary).to.eql(Number(start));\r",
							"});\r",
							"// Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"qa_salary_after_6_months=salary*2\", function () {\r",
							"    pm.expect(resp.qa_salary_after_6_months).to.eql(Number(start*2));\r",
							"});\r",
							"//  Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"pm.test(\"qa_salary_after_12_months=salary*2.7\", function () {\r",
							"    pm.expect(resp.qa_salary_after_12_months).to.eql(Number(start*2.7));\r",
							"\r",
							"});\r",
							"// Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"pm.test(\"qa_salary_after_1.5_year=salary*3.3\", function () {\r",
							"    pm.expect(resp[\"qa_salary_after_1.5_year\"]).to.eql(Number(start*3.3));\r",
							"\r",
							"});\r",
							"// Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"pm.test(\"qa_salary_after_3.5_years=salary*3.8\", function () {\r",
							"    pm.expect(resp[\"qa_salary_after_3.5_years\"]).to.eql(Number(start*3.8));\r",
							"\r",
							"});\r",
							"// Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"pm.test(\"The 1st element from u_name is equal to salary from request\", function () {\r",
							"    pm.expect(resp.person.u_name[1]).to.eql(Number(req.salary));\r",
							"\r",
							"});\r",
							"// Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							"pm.test(\"the u_age parameter is equal to the age of the request\", function () {\r",
							"    pm.expect(resp.person.u_age).to.eql(Number(req.age));\r",
							"\r",
							"});\r",
							"// Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"pm.test(\"u_salary_5_years=salary*4.2\", function () {\r",
							"    pm.expect(resp.person.u_salary_5_years).to.eql(Number(start*4.2)); \r",
							"    });\r",
							"\r",
							"// Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
							" \r",
							" var obj = resp.person;\r",
							"console.log(Object.values(obj)); "
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "default"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "default"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "default"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					],
					"query": [
						{
							"key": "",
							"value": "",
							"disabled": true
						},
						{
							"key": "",
							"value": "",
							"disabled": true
						},
						{
							"key": "",
							"value": "",
							"disabled": true
						},
						{
							"key": "",
							"value": "",
							"disabled": true
						}
					]
				}
			},
			"response": []
		}
	]
}